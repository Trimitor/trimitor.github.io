export default async function ({ template }) {
    document.title = 'Caverns and Mines Fix | WDM Collection';
    return Mustache.render(template, {});
}

const CONTINENTS = [0, 1, 530]

const ADDONS = [
    {
        name: "Astrolabe",
        onclick: doAstrolabe,
    },
    {
        name: "Questie",
        onclick: doQuestie,
    },
    {
        name: "QuestHelper",
        onclick: doQuestHelper,
    },
    {
        name: "Gathermate",
        onclick: doGathermate
    },
    {
        name: "LibMapData-1.0",
        onclick: doLibMapData
    }
];
export async function after() {
    const $addons = $("#addons");
    if (!$addons.length) return;
    
    let caverns;
    try {
        const response = await fetch('data/caverns.json');
        if (!response.ok) throw new Error('Network response was not ok');
        caverns = await response.json();
    } catch (error) {
        return;
    }

    const optionsHtml = ADDONS
        .sort((a, b) => a.name.localeCompare(b.name))
        .map(addon => `<option value="${addon.name}">${addon.name}</option>`)
        .join('');
    
    $addons.append(optionsHtml);
    
    $addons.on('change', () => {
        $("#one").empty();
        $("#two").empty();
        $("#three").empty();
        $(".first").hide();
        $(".second").hide();
        const selectedAddon = ADDONS.find(addon => addon.name === $addons.val());
        selectedAddon?.onclick(caverns);
    });
}

function doAstrolabe(_caverns) {
    let az = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => cavern[1] === 0 || cavern[1] === 530 && cavern[8] === 0).forEach((cavern, key) => {
        let width = fn(cavern[4] - cavern[5]);
        let height = fn(cavern[6] - cavern[7]);
        let xOffset = fn(_caverns.continents[0][0] - cavern[4] - (cavern[1] === 530 ? _caverns.offset[0][1] : 0));
        let yOffset = fn(_caverns.continents[0][2] - cavern[6] - (cavern[1] === 530 ? _caverns.offset[0][0] : 0));
        az += `${ cavern[3] } = {\n\theight = ${ height },\n\twidth = ${ width },\n\txOffset = ${ xOffset },\n\tyOffset = ${ yOffset },\n},\n`;
    })
    let kl = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => cavern[1] === 1 || cavern[1] === 530 && cavern[8] === 1).forEach((cavern, key) => {
        let width = fn(cavern[4] - cavern[5]);
        let height = fn(cavern[6] - cavern[7]);
        let xOffset = fn(_caverns.continents[1][0] - cavern[4] - (cavern[1] === 530 ? _caverns.offset[1][1] : 0));
        let yOffset = fn(_caverns.continents[1][2] - cavern[6] - (cavern[1] === 530 ? _caverns.offset[1][0] : 0));
        kl += `${ cavern[3] } = {\n\theight = ${ height },\n\twidth = ${ width },\n\txOffset = ${ xOffset },\n\tyOffset = ${ yOffset },\n},\n`;
    });

    $("#two").val(az);
    setlbl("two", "<Astrolabe Folder>\\Astrolabe.lua | Eastern Kingdoms");
    setlbl("three", "<Astrolabe Folder>\\Astrolabe.lua | Kalimdor");
    $("#three").val(kl);
    $(".second").show();
}

function doQuestHelper(_caverns) {
    let az = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => cavern[1] === 0 || cavern[1] === 530 && cavern[8] === 0).forEach((cavern, key) => {
        let width = fn(cavern[4] - cavern[5]);
        let height = fn(cavern[6] - cavern[7]);
        let xOffset = fn(_caverns.continents[0][0] - cavern[4] - (cavern[1] === 530 ? _caverns.offset[0][1] : 0));
        let yOffset = fn(_caverns.continents[0][2] - cavern[6] - (cavern[1] === 530 ? _caverns.offset[0][0] : 0));
        az += `${ cavern[3] } = {\n\theight = ${ height },\n\twidth = ${ width },\n\txOffset = ${ xOffset },\n\tyOffset = ${ yOffset },\n\tmapID = ${ cavern[2] },\n},\n`;
    })
    let kl = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => cavern[1] === 1 || cavern[1] === 530 && cavern[8] === 1).forEach((cavern, key) => {
        let width = fn(cavern[4] - cavern[5]);
        let height = fn(cavern[6] - cavern[7]);
        let xOffset = fn(_caverns.continents[1][0] - cavern[4] - (cavern[1] === 530 ? _caverns.offset[1][1] : 0));
        let yOffset = fn(_caverns.continents[1][2] - cavern[6] - (cavern[1] === 530 ? _caverns.offset[1][0] : 0));
        kl += `${ cavern[3] } = {\n\theight = ${ height },\n\twidth = ${ width },\n\txOffset = ${ xOffset },\n\tyOffset = ${ yOffset },\n\tmapID = ${ cavern[2] },\n},\n`;
    });

    setlbl("two", "<AstrolabeQH Folder>\\Astrolabe.lua | Eastern Kingdoms");
    setlbl("three", "<AstrolabeQH Folder>\\Astrolabe.lua | Kalimdor");
    $("#two").val(az);
    $("#three").val(kl);
    $(".second").show();
}

function doQuestie(_caverns) {
    let paste = "-- Generated by WDM Collection\n";
    let uiMapData = new Map(_caverns.uiMap);
    _caverns.worldMapArea.filter(cavern => CONTINENTS.includes(cavern[1])).forEach((cavern, key) => {
        let locInstance = cavern[1] === 530 && cavern[8] !== -1 ? cavern[8] : cavern[1]; 
        paste += `[${uiMapData.get(cavern[2])}] = {\n\t[1] = ${fn(Math.abs(cavern[5]-cavern[4]))},\n\t[2] = ${fn(Math.abs(cavern[7]-cavern[6]))},\n\t[3] = ${fn(cavern[4])},\n\t[4] = ${fn(cavern[6])},\n\t["mapType"] = 3,\n\t["parentMapID"] = ${ getPMID(locInstance) },\n\t["mapID"] = ${ cavern[0] + 1 },\n\t["instance"] = ${ locInstance },\n\t["name"] = "${ _caverns.areaTable.find(area => area[0] === cavern[2])[11] }",\n},\n`;
    })

    $("#one").val(paste);
    setlbl("one", "Interface\\Addons\\Questie-335\\Compat\\UiMapData.lua");
    $(".first").show();
}

function doGathermate(_caverns) {
    let paste = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => CONTINENTS.includes(cavern[1])).forEach((cavern, key) => {
        paste += `${ cavern[3] } = { ${ cavern[4] - cavern[5] }, ${ cavern[6] - cavern[7] }, ${ 144 + key }},\n`;
    }) 

    $("#one").val(paste);
    setlbl("one", "Interface\\Addons\\GatherMate\\Constants.lua");
    $(".first").show();
}

function doLibMapData(_caverns) {
    let paste = "-- Generated by WDM Collection\n";
    _caverns.worldMapArea.filter(cavern => !CONTINENTS.includes(cavern[1])).forEach((cavern, key) => {
        let fc = 1;
        let floors = _caverns.levels.filter(level => level[1] === cavern[1]);
        paste += `mapData[${cavern[0]}] = {\n\t['floors'] = ${ cavern[9] === -1 ? floors.length + 1 : floors.length }, ['name'] = "${cavern[3]}", ['rzti'] = ${ cavern[1] }, ['map_type'] = ${ _caverns.dungeonType.find(dungeon => dungeon[0] === cavern[0])[1] }, ['continent'] = 0, ['link'] = 0, ['transform'] = 0,\n\t`;
        if (cavern[9] === -1 || cavern[4] !== 0.0 && cavern[5] !== 0.0 && cavern[6] !== 0.0 && cavern[7] !== 0.0 && floors.length === 0) {
            let width = fn(Math.abs(cavern[5]-cavern[4]));
            let height = fn(Math.abs(cavern[7]-cavern[6]));
            let x1 = fn(cavern[4] * -1);
            let y1 = fn(cavern[6]);
            let x2 = fn(cavern[5] * -1);
            let y2 = fn(cavern[7]);
            paste += `[${fc}] = {${ width },${ height },${ x1 },${ y1 },${ x2 },${ y2 }},\n\t`;
            fc++;
        }

        floors.forEach((floor, fkey) => {
            let width = fn(Math.abs(floor[4]-floor[3]));
            let height = fn(Math.abs(floor[6]-floor[5]));
            let x1 = fn(floor[3] * -1);
            let y1 = fn(floor[5]);
            let x2 = fn(floor[4] * -1);
            let y2 = fn(floor[6]);
            paste += `[${fc}] = {${ width },${ height },${ x1 },${ y1 },${ x2 },${ y2 }},\n\t`;
            fc++;
        });

        paste += `}\n`;
    })

    _caverns.worldMapArea.filter(cavern => CONTINENTS.includes(cavern[1])).forEach((cavern, key) => {
        let width = fn(Math.abs(cavern[5]-cavern[4]));
        let height = fn(Math.abs(cavern[7]-cavern[6]));
        let x1 = fn(cavern[4] * -1);
        let y1 = fn(cavern[6]);
        let x2 = fn(cavern[5] * -1);
        let y2 = fn(cavern[7]);

        paste += `mapData[${cavern[0]}] = {\n\t['floors'] = 0, ['name'] = "${cavern[3]}", ['rzti'] = ${ cavern[1] }, ['map_type'] = 0, ['continent'] = ${ gc(cavern[1]) }, ['link'] = 0, ['transform'] = 0,\n\t[1] = {${ width },${ height },${ x1 },${ y1 },${ x2 },${ y2 }},\n}\n`;
    })

    $("#one").val(paste);
    setlbl("one", "<LibMapData-1.0 Folder>\\LibMapData-1.0.lua");
    $(".first").show();
}

function fn(num) {
    const formatted = parseFloat(num.toFixed(6)) + '';
    return formatted.includes('.') ? formatted : formatted + '.0';
}

function gc(id) {
    return [1, 2][id] ?? 3;
}

function getPMID(i) {
    return i === 530 ? 1945
         : i === 0 ? 1415
         : i === 1 ? 1414
         : i;
}

function setlbl(id, text) {
    $(`#${id}`).parent().find("label").text(text);
}